name: CI/CD Pipeline

on:
  push:
    branches: [main]

jobs:
  # CI 작업
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. 의존성 설치
      - name: Install dependencies
        run: |
          npm install

      # 3. 코드 품질 검사 (Lint)
      - name: Lint code
        run: |
          npm run lint

      # 4. 테스트 실행
      - name: Run tests
        run: |
          npm test

      # 5. 빌드 실행
      - name: Build application
        run: |
          npm run build

  # CD 작업
  cd:
    name: Continuous Deployment
    runs-on: ubuntu-latest
    needs: ci # CI 작업 성공 시에만 실행

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. 서버 배포 (SSH를 사용)
      - name: SSH Remote Commands
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: ${{ secrets.DEPLOY_PORT }}
          timeout: 40s
          script: |
            echo "#START"
            cd /home/soft1/prod_2022/sw-judger

            echo "############# GIT PULL #############"
            if git pull origin main; then
              echo "Git pull successful"
            else
              echo "Git pull failed!"
              exit 1
            fi

            echo "############# DOCKER-COMPOSE DOWN #############"
            docker-compose -f docker-compose_prod.yml down --remove-orphans || { echo "Failed to stop existing containers"; exit 1; }

            echo "############# DOCKER SYSTEM AND VOLUME PRUNE #############"
            docker system prune -f || { echo "Failed to prune Docker system!"; }
            docker volume prune -f || { echo "Failed to prune Docker volumes!"; }

            echo "############# DOCKER-COMPOSE UP #############"
            docker-compose -f docker-compose_prod.yml up -d --build --remove-orphans || { echo "Failed to build and start Docker Compose! Exiting."; exit 1; }
