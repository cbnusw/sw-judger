name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Check out repository
        uses: actions/checkout@v2

      # 2. Node.js 설정
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.17.0'

      # 3. judger-frontend 의존성 설치 및 검사
      - name: Install dependencies for frontend
        run: npm install
        working-directory: ./judger-frontend

      - name: Run lint for frontend
        run: npm run lint
        working-directory: ./judger-frontend

      # 4. judger 의존성 설치
      - name: Install dependencies for backend judger
        run: npm install
        working-directory: ./judger-backend/judger

      # 5. judger-api 의존성 설치
      - name: Install dependencies for backend judger-api
        run: npm install
        working-directory: ./judger-backend/judger-api

   cd:
    name: Continuous Deployment
    needs: ci
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Check out repository
        uses: actions/checkout@v2

      # 2. 원격 서버 배포
      - name: SSH Remote Commands
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: ${{ secrets.DEPLOY_PORT }}
          timeout: 40s
          script: |
            echo "#START"
            cd /home/soft1/prod_2022/sw-judger

            echo "############# GIT PULL #############"
            if git pull origin main; then
              echo "Git pull successful"
            else
              echo "Git pull failed!"
              exit 1
            fi

            echo "############# DOCKER-COMPOSE DOWN #############"
            docker-compose -f docker-compose_prod.yml down --remove-orphans || { echo "Failed to stop existing containers"; exit 1; }

            echo "############# DOCKER SYSTEM AND VOLUME PRUNE #############"
            # 불필요한 Docker 데이터 정리
            docker system prune -a --volumes -f || { echo "Failed to prune Docker system!"; exit 1; }

            echo "############# DOCKER-COMPOSE UP #############"
            # Docker 로그 파일 크기 제한 설정
            sed -i '/services:/a\
              logging:\\n\
                driver: "json-file"\\n\
                options:\\n\
                  max-size: "10m"\\n\
                  max-file: "3"\\n' docker-compose_prod.yml || { echo "Failed to update logging config"; exit 1; }

            # 컨테이너 빌드 및 시작
            docker-compose -f docker-compose_prod.yml up -d --build --remove-orphans || { echo "Failed to build and start Docker Compose! Exiting."; exit 1; }